<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <c:include name="libbamf/libbamf.h"/>
  <namespace name="Bamf"
             version="0.2"
             shared-library="libbamf.so.0"
             c:identifier-prefixes="Bamf"
             c:symbol-prefixes="bamf">
    <class name="Application"
           c:symbol-prefix="application"
           c:type="BamfApplication"
           parent="View"
           glib:type-name="BamfApplication"
           glib:get-type="bamf_application_get_type"
           glib:type-struct="ApplicationClass">
      <method name="get_application_type"
              c:identifier="bamf_application_get_application_type">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_desktop_file"
              c:identifier="bamf_application_get_desktop_file">
        <doc xml:whitespace="preserve">Used to fetch the path to the .desktop file associated with the passed application. If
none exists, the result is NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A string representing the path to the desktop file.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_show_menu_stubs"
              c:identifier="bamf_application_get_show_menu_stubs">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_windows" c:identifier="bamf_application_get_windows">
        <doc xml:whitespace="preserve">Used to fetch all #BamfWindow's associated with the passed #BamfApplication.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A list of #BamfWindow's.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
      </method>
      <method name="get_xids" c:identifier="bamf_application_get_xids">
        <doc xml:whitespace="preserve">Used to fetch all #BamfWindow's xids associated with the passed #BamfApplication.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">An array of xids.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
      </method>
      <field name="parent">
        <type name="View" c:type="BamfView"/>
      </field>
      <field name="priv">
        <type name="ApplicationPrivate" c:type="BamfApplicationPrivate*"/>
      </field>
      <glib:signal name="window-added">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="View"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="window-removed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="View"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ApplicationClass"
            c:type="BamfApplicationClass"
            glib:is-gtype-struct-for="Application">
      <field name="parent_class">
        <type name="ViewClass" c:type="BamfViewClass"/>
      </field>
      <field name="_application_padding1" introspectable="0">
        <callback name="_application_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_application_padding2" introspectable="0">
        <callback name="_application_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_application_padding3" introspectable="0">
        <callback name="_application_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_application_padding4" introspectable="0">
        <callback name="_application_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_application_padding5" introspectable="0">
        <callback name="_application_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_application_padding6" introspectable="0">
        <callback name="_application_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ApplicationPrivate"
            c:type="BamfApplicationPrivate"
            disguised="1">
    </record>
    <enumeration name="ClickBehavior" c:type="BamfClickBehavior">
      <member name="none" value="0" c:identifier="BAMF_CLICK_BEHAVIOR_NONE"/>
      <member name="open" value="1" c:identifier="BAMF_CLICK_BEHAVIOR_OPEN"/>
      <member name="focus" value="2" c:identifier="BAMF_CLICK_BEHAVIOR_FOCUS"/>
      <member name="focus_all"
              value="3"
              c:identifier="BAMF_CLICK_BEHAVIOR_FOCUS_ALL"/>
      <member name="minimize"
              value="4"
              c:identifier="BAMF_CLICK_BEHAVIOR_MINIMIZE"/>
      <member name="restore"
              value="5"
              c:identifier="BAMF_CLICK_BEHAVIOR_RESTORE"/>
      <member name="restore_all"
              value="6"
              c:identifier="BAMF_CLICK_BEHAVIOR_RESTORE_ALL"/>
      <member name="picker"
              value="7"
              c:identifier="BAMF_CLICK_BEHAVIOR_PICKER"/>
    </enumeration>
    <class name="Control"
           c:symbol-prefix="control"
           c:type="BamfControl"
           parent="GObject.Object"
           glib:type-name="BamfControl"
           glib:get-type="bamf_control_get_type"
           glib:type-struct="ControlClass">
      <function name="get_default"
                c:identifier="bamf_control_get_default"
                introspectable="0">
        <return-value>
          <type name="Control" c:type="BamfControl*"/>
        </return-value>
      </function>
      <method name="insert_desktop_file"
              c:identifier="bamf_control_insert_desktop_file">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="desktop_file" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_application_for_pid"
              c:identifier="bamf_control_register_application_for_pid">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="application" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="pid" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_tab_provider"
              c:identifier="bamf_control_register_tab_provider">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_approver_behavior"
              c:identifier="bamf_control_set_approver_behavior">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="behavior" transfer-ownership="none">
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ControlPrivate" c:type="BamfControlPrivate*"/>
      </field>
    </class>
    <record name="ControlClass"
            c:type="BamfControlClass"
            glib:is-gtype-struct-for="Control">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_control_padding1" introspectable="0">
        <callback name="_control_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_control_padding2" introspectable="0">
        <callback name="_control_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_control_padding3" introspectable="0">
        <callback name="_control_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_control_padding4" introspectable="0">
        <callback name="_control_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_control_padding5" introspectable="0">
        <callback name="_control_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_control_padding6" introspectable="0">
        <callback name="_control_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ControlPrivate" c:type="BamfControlPrivate" disguised="1">
    </record>
    <class name="Indicator"
           c:symbol-prefix="indicator"
           c:type="BamfIndicator"
           parent="View"
           glib:type-name="BamfIndicator"
           glib:get-type="bamf_indicator_get_type"
           glib:type-struct="IndicatorClass">
      <method name="get_dbus_menu_path"
              c:identifier="bamf_indicator_get_dbus_menu_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_remote_address"
              c:identifier="bamf_indicator_get_remote_address">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_remote_path"
              c:identifier="bamf_indicator_get_remote_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="View" c:type="BamfView"/>
      </field>
      <field name="priv">
        <type name="IndicatorPrivate" c:type="BamfIndicatorPrivate*"/>
      </field>
    </class>
    <record name="IndicatorClass"
            c:type="BamfIndicatorClass"
            glib:is-gtype-struct-for="Indicator">
      <field name="parent_class">
        <type name="ViewClass" c:type="BamfViewClass"/>
      </field>
      <field name="_indicator_padding1" introspectable="0">
        <callback name="_indicator_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_indicator_padding2" introspectable="0">
        <callback name="_indicator_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_indicator_padding3" introspectable="0">
        <callback name="_indicator_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_indicator_padding4" introspectable="0">
        <callback name="_indicator_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_indicator_padding5" introspectable="0">
        <callback name="_indicator_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_indicator_padding6" introspectable="0">
        <callback name="_indicator_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="IndicatorPrivate"
            c:type="BamfIndicatorPrivate"
            disguised="1">
    </record>
    <class name="Matcher"
           c:symbol-prefix="matcher"
           c:type="BamfMatcher"
           parent="GObject.Object"
           glib:type-name="BamfMatcher"
           glib:get-type="bamf_matcher_get_type"
           glib:type-struct="MatcherClass">
      <function name="get_default" c:identifier="bamf_matcher_get_default">
        <doc xml:whitespace="preserve">Returns the default matcher. This matcher is owned by bamf and shared between other callers.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A new #BamfMatcher</doc>
          <type name="Matcher" c:type="BamfMatcher*"/>
        </return-value>
      </function>
      <method name="application_is_running"
              c:identifier="bamf_matcher_application_is_running">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="application" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_application"
              c:identifier="bamf_matcher_get_active_application">
        <doc xml:whitespace="preserve">Used to fetch the active #BamfApplication.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The active #BamfApplication.</doc>
          <type name="Application" c:type="BamfApplication*"/>
        </return-value>
      </method>
      <method name="get_active_window"
              c:identifier="bamf_matcher_get_active_window">
        <doc xml:whitespace="preserve">Used to fetch the active #BamfWindow.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The active #BamfWindow.</doc>
          <type name="Window" c:type="BamfWindow*"/>
        </return-value>
      </method>
      <method name="get_application_for_desktop_file"
              c:identifier="bamf_matcher_get_application_for_desktop_file"
              introspectable="0">
        <return-value>
          <type name="Application" c:type="BamfApplication*"/>
        </return-value>
        <parameters>
          <parameter name="desktop_file_path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="create_if_not_found" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_application_for_window"
              c:identifier="bamf_matcher_get_application_for_window">
        <doc xml:whitespace="preserve">Used to fetch the #BamfApplication containing the passed window.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">The #BamfApplication representing the xid passed, or NULL if none exists.</doc>
          <type name="Application" c:type="BamfApplication*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:whitespace="preserve">The window to look for</doc>
            <type name="Window" c:type="BamfWindow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_application_for_xid"
              c:identifier="bamf_matcher_get_application_for_xid">
        <doc xml:whitespace="preserve">Used to fetch the #BamfApplication containing the passed xid.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">The #BamfApplication representing the xid passed, or NULL if none exists.</doc>
          <type name="Application" c:type="BamfApplication*"/>
        </return-value>
        <parameters>
          <parameter name="xid" transfer-ownership="none">
            <doc xml:whitespace="preserve">The XID to search for</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_applications"
              c:identifier="bamf_matcher_get_applications">
        <doc xml:whitespace="preserve">Used to fetch all xid's associated with an application. Useful for performing window</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">A list of xids.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="guint32"/>
          </type>
        </return-value>
      </method>
      <method name="get_running_applications"
              c:identifier="bamf_matcher_get_running_applications">
        <doc xml:whitespace="preserve">Used to fetch all #BamfApplication's which are running.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A list of #BamfApplication's.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Application"/>
          </type>
        </return-value>
      </method>
      <method name="get_tabs" c:identifier="bamf_matcher_get_tabs">
        <doc xml:whitespace="preserve">Used to fetch all #BamfView's representing tabs. Currently unused.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A list of #BamfViews's.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="View"/>
          </type>
        </return-value>
      </method>
      <method name="get_windows" c:identifier="bamf_matcher_get_windows">
        <doc xml:whitespace="preserve">Used to fetch all windows that BAMF knows about.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">A list of windows.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="View"/>
          </type>
        </return-value>
      </method>
      <method name="get_xids_for_application"
              c:identifier="bamf_matcher_get_xids_for_application"
              introspectable="0">
        <return-value>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="application" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_favorites"
              c:identifier="bamf_matcher_register_favorites">
        <doc xml:whitespace="preserve">Used to effect how bamf performs matching. Desktop files passed to this method will
be prefered by bamf to system desktop files.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="favorites" transfer-ownership="none">
            <doc xml:whitespace="preserve">an array of strings, each containing an absolute path to a .desktop file</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MatcherPrivate" c:type="BamfMatcherPrivate*"/>
      </field>
      <glib:signal name="active-application-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="active-window-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="view-closed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="view-opened">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MatcherClass"
            c:type="BamfMatcherClass"
            glib:is-gtype-struct-for="Matcher">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_matcher_padding1" introspectable="0">
        <callback name="_matcher_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_matcher_padding2" introspectable="0">
        <callback name="_matcher_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_matcher_padding3" introspectable="0">
        <callback name="_matcher_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_matcher_padding4" introspectable="0">
        <callback name="_matcher_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_matcher_padding5" introspectable="0">
        <callback name="_matcher_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_matcher_padding6" introspectable="0">
        <callback name="_matcher_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="MatcherPrivate" c:type="BamfMatcherPrivate" disguised="1">
    </record>
    <class name="Tab"
           c:symbol-prefix="tab"
           c:type="BamfTab"
           parent="View"
           glib:type-name="BamfTab"
           glib:get-type="bamf_tab_get_type"
           glib:type-struct="TabClass">
      <constructor name="new" c:identifier="bamf_tab_new">
        <return-value transfer-ownership="full">
          <type name="Tab" c:type="BamfTab*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="show" invoker="show">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </virtual-method>
      <method name="get_id" c:identifier="bamf_tab_get_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_preview" c:identifier="bamf_tab_get_preview">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_uri" c:identifier="bamf_tab_get_uri">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_preview" c:identifier="bamf_tab_set_preview">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri" c:identifier="bamf_tab_set_uri">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="bamf_tab_show">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <property name="id" writable="1" construct="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="preview" writable="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="uri"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="View" c:type="BamfView"/>
      </field>
      <field name="priv">
        <type name="TabPrivate" c:type="BamfTabPrivate*"/>
      </field>
      <glib:signal name="preview-updated">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="uri-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TabClass"
            c:type="BamfTabClass"
            glib:is-gtype-struct-for="Tab">
      <field name="parent_class">
        <type name="ViewClass" c:type="BamfViewClass"/>
      </field>
      <field name="show">
        <callback name="show">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Tab" c:type="BamfTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="uri_changed">
        <callback name="uri_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="old_uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
            <parameter name="new_uri" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="preview_updated">
        <callback name="preview_updated">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_tab_padding1" introspectable="0">
        <callback name="_tab_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_tab_padding2" introspectable="0">
        <callback name="_tab_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_tab_padding3" introspectable="0">
        <callback name="_tab_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_tab_padding4" introspectable="0">
        <callback name="_tab_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_tab_padding5" introspectable="0">
        <callback name="_tab_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_tab_padding6" introspectable="0">
        <callback name="_tab_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="TabPrivate" c:type="BamfTabPrivate" disguised="1">
    </record>
    <class name="TabSource"
           c:symbol-prefix="tab_source"
           c:type="BamfTabSource"
           parent="GObject.Object"
           glib:type-name="BamfTabSource"
           glib:get-type="bamf_tab_source_get_type"
           glib:type-struct="TabSourceClass">
      <virtual-method name="show_tab">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_ids" introspectable="0">
        <return-value>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
      </virtual-method>
      <virtual-method name="tab_preview" introspectable="0">
        <return-value>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_uri">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_xid">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_tab_ids"
              c:identifier="bamf_tab_source_get_tab_ids"
              introspectable="0">
        <return-value>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
      </method>
      <method name="get_tab_preview"
              c:identifier="bamf_tab_source_get_tab_preview"
              introspectable="0">
        <return-value>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tab_uri" c:identifier="bamf_tab_source_get_tab_uri">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tab_xid" c:identifier="bamf_tab_source_get_tab_xid">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_tab" c:identifier="bamf_tab_source_show_tab">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="tab_id" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <property name="id" writable="1" construct="1" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="TabSourcePrivate" c:type="BamfTabSourcePrivate*"/>
      </field>
      <glib:signal name="tab-closed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tab-opened">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tab-uri-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="utf8"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TabSourceClass"
            c:type="BamfTabSourceClass"
            glib:is-gtype-struct-for="TabSource">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="show_tab">
        <callback name="show_tab">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="TabSource" c:type="BamfTabSource*"/>
            </parameter>
            <parameter name="tab_id" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_ids" introspectable="0">
        <callback name="tab_ids" introspectable="0">
          <return-value>
            <array c:type="char**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="TabSource" c:type="BamfTabSource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_preview" introspectable="0">
        <callback name="tab_preview" introspectable="0">
          <return-value>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="TabSource" c:type="BamfTabSource*"/>
            </parameter>
            <parameter name="tab_id" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_uri">
        <callback name="tab_uri">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="TabSource" c:type="BamfTabSource*"/>
            </parameter>
            <parameter name="tab_id" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_xid">
        <callback name="tab_xid">
          <return-value transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="TabSource" c:type="BamfTabSource*"/>
            </parameter>
            <parameter name="tab_id" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TabSourcePrivate"
            c:type="BamfTabSourcePrivate"
            disguised="1">
    </record>
    <class name="View"
           c:symbol-prefix="view"
           c:type="BamfView"
           parent="GObject.Object"
           glib:type-name="BamfView"
           glib:get-type="bamf_view_get_type"
           glib:type-struct="ViewClass">
      <virtual-method name="click_behavior">
        <return-value transfer-ownership="none">
          <type name="ClickBehavior" c:type="BamfClickBehavior"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_children" invoker="get_children">
        <doc xml:whitespace="preserve">freed after usage. Elements of the list are owned by bamf and should not be unreffed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">Returns a list of #BamfView which must be</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="View"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="get_icon" invoker="get_icon">
        <doc xml:whitespace="preserve">Gets the icon of a view. This icon is used to visually represent the view.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <doc xml:whitespace="preserve">Gets the name of a view. This name is a short name best used to represent the view with text.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <virtual-method name="is_active" invoker="is_active">
        <doc xml:whitespace="preserve">Determines if the view is currently active and focused by the user. Useful for an active window indicator.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="is_running" invoker="is_running">
        <doc xml:whitespace="preserve">Determines if the view is currently requiring attention. Useful for a running window indicator.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="is_urgent" invoker="is_urgent">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="set_path">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="view_type">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </virtual-method>
      <method name="get_children" c:identifier="bamf_view_get_children">
        <doc xml:whitespace="preserve">freed after usage. Elements of the list are owned by bamf and should not be unreffed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">Returns a list of #BamfView which must be</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="View"/>
          </type>
        </return-value>
      </method>
      <method name="get_click_suggestion"
              c:identifier="bamf_view_get_click_suggestion">
        <return-value transfer-ownership="none">
          <type name="ClickBehavior" c:type="BamfClickBehavior"/>
        </return-value>
      </method>
      <method name="get_icon" c:identifier="bamf_view_get_icon">
        <doc xml:whitespace="preserve">Gets the icon of a view. This icon is used to visually represent the view.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_name" c:identifier="bamf_view_get_name">
        <doc xml:whitespace="preserve">Gets the name of a view. This name is a short name best used to represent the view with text.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_view_type" c:identifier="bamf_view_get_view_type">
        <doc xml:whitespace="preserve">The view type of a window is a short string used to represent all views of the same class. These
descriptions should not be used to do casting as they are not considered stable.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">A gchar*</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="is_active" c:identifier="bamf_view_is_active">
        <doc xml:whitespace="preserve">Determines if the view is currently active and focused by the user. Useful for an active window indicator.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_closed" c:identifier="bamf_view_is_closed">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_running" c:identifier="bamf_view_is_running">
        <doc xml:whitespace="preserve">Determines if the view is currently requiring attention. Useful for a running window indicator.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_sticky" c:identifier="bamf_view_is_sticky">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="is_urgent" c:identifier="bamf_view_is_urgent">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="set_sticky" c:identifier="bamf_view_set_sticky">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="user_visible" c:identifier="bamf_view_user_visible">
        <doc xml:whitespace="preserve">Returns a boolean useful for determining if a particular view is "user visible". User visible
is a concept relating to whether or not a window should be shown in a launcher tasklist.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <property name="active" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="path" transfer-ownership="none">
        <type name="utf8"/>
      </property>
      <property name="running" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="urgent" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <property name="user-visible" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ViewPrivate" c:type="BamfViewPrivate*"/>
      </field>
      <glib:signal name="active-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-added">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="View"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="child-removed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="View"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="closed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
      </glib:signal>
      <glib:signal name="running-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="urgent-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="user-visible-changed">
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ViewClass"
            c:type="BamfViewClass"
            glib:is-gtype-struct-for="View">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_children">
        <callback name="get_children">
          <return-value transfer-ownership="container">
            <doc xml:whitespace="preserve">Returns a list of #BamfView which must be</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="View"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_active">
        <callback name="is_active">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_running">
        <callback name="is_running">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_urgent">
        <callback name="is_urgent">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon">
        <callback name="get_icon">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="view_type">
        <callback name="view_type">
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_path">
        <callback name="set_path">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="click_behavior">
        <callback name="click_behavior">
          <return-value transfer-ownership="none">
            <type name="ClickBehavior" c:type="BamfClickBehavior"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="active_changed">
        <callback name="active_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
            <parameter name="active" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_added">
        <callback name="child_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_removed">
        <callback name="child_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="running_changed">
        <callback name="running_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
            <parameter name="running" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="urgent_changed">
        <callback name="urgent_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
            <parameter name="urgent" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="user_visible_changed">
        <callback name="user_visible_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="BamfView*"/>
            </parameter>
            <parameter name="user_visible" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_view_padding1" introspectable="0">
        <callback name="_view_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_view_padding2" introspectable="0">
        <callback name="_view_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_view_padding3" introspectable="0">
        <callback name="_view_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_view_padding4" introspectable="0">
        <callback name="_view_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_view_padding5" introspectable="0">
        <callback name="_view_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_view_padding6" introspectable="0">
        <callback name="_view_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="ViewPrivate" c:type="BamfViewPrivate" disguised="1">
    </record>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="BamfWindow"
           parent="View"
           glib:type-name="BamfWindow"
           glib:get-type="bamf_window_get_type"
           glib:type-struct="WindowClass">
      <method name="get_transient"
              c:identifier="bamf_window_get_transient"
              introspectable="0">
        <return-value>
          <type name="Window" c:type="BamfWindow*"/>
        </return-value>
      </method>
      <method name="get_window_type"
              c:identifier="bamf_window_get_window_type">
        <return-value transfer-ownership="none">
          <type name="WindowType" c:type="BamfWindowType"/>
        </return-value>
      </method>
      <method name="get_xid" c:identifier="bamf_window_get_xid">
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
      </method>
      <method name="last_active" c:identifier="bamf_window_last_active">
        <return-value transfer-ownership="none">
          <type name="glong" c:type="time_t"/>
        </return-value>
      </method>
      <field name="parent">
        <type name="View" c:type="BamfView"/>
      </field>
      <field name="priv">
        <type name="WindowPrivate" c:type="BamfWindowPrivate*"/>
      </field>
    </class>
    <record name="WindowClass"
            c:type="BamfWindowClass"
            glib:is-gtype-struct-for="Window">
      <field name="parent_class">
        <type name="ViewClass" c:type="BamfViewClass"/>
      </field>
      <field name="_window_padding1" introspectable="0">
        <callback name="_window_padding1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_window_padding2" introspectable="0">
        <callback name="_window_padding2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_window_padding3" introspectable="0">
        <callback name="_window_padding3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_window_padding4" introspectable="0">
        <callback name="_window_padding4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_window_padding5" introspectable="0">
        <callback name="_window_padding5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_window_padding6" introspectable="0">
        <callback name="_window_padding6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="WindowPrivate" c:type="BamfWindowPrivate" disguised="1">
    </record>
    <enumeration name="WindowType" c:type="BamfWindowType">
      <member name="normal" value="0" c:identifier="BAMF_WINDOW_NORMAL"/>
      <member name="desktop" value="1" c:identifier="BAMF_WINDOW_DESKTOP"/>
      <member name="dock" value="2" c:identifier="BAMF_WINDOW_DOCK"/>
      <member name="dialog" value="3" c:identifier="BAMF_WINDOW_DIALOG"/>
      <member name="toolbar" value="4" c:identifier="BAMF_WINDOW_TOOLBAR"/>
      <member name="menu" value="5" c:identifier="BAMF_WINDOW_MENU"/>
      <member name="utility" value="6" c:identifier="BAMF_WINDOW_UTILITY"/>
      <member name="splashscreen"
              value="7"
              c:identifier="BAMF_WINDOW_SPLASHSCREEN"/>
    </enumeration>
  </namespace>
</repository>
