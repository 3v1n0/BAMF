/*
 * Generated by gdbus-codegen 2.31.16. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BAMF_GDBUS_VIEW_GENERATED_H__
#define __BAMF_GDBUS_VIEW_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.ayatana.bamf.view */

#define BAMF_DBUS_ITEM_TYPE_VIEW (bamf_dbus_item_view_get_type ())
#define BAMF_DBUS_ITEM_VIEW(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_VIEW, BamfDBusItemView))
#define BAMF_DBUS_ITEM_IS_VIEW(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_VIEW))
#define BAMF_DBUS_ITEM_VIEW_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BAMF_DBUS_ITEM_TYPE_VIEW, BamfDBusItemViewIface))

struct _BamfDBusItemView;
typedef struct _BamfDBusItemView BamfDBusItemView;
typedef struct _BamfDBusItemViewIface BamfDBusItemViewIface;

struct _BamfDBusItemViewIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_children) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_icon) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_is_active) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_is_running) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_is_urgent) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_name) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_parents) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_user_visible) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_view_type) (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_active) (BamfDBusItemView *object);

  gboolean  (*get_running) (BamfDBusItemView *object);

  gboolean  (*get_urgent) (BamfDBusItemView *object);

  gboolean  (*get_user_visible) (BamfDBusItemView *object);

  void (*active_changed) (
    BamfDBusItemView *object,
    gboolean arg_is_active);

  void (*child_added) (
    BamfDBusItemView *object,
    const gchar *arg_path);

  void (*child_removed) (
    BamfDBusItemView *object,
    const gchar *arg_path);

  void (*closed) (
    BamfDBusItemView *object);

  void (*name_changed) (
    BamfDBusItemView *object,
    const gchar *arg_old_name,
    const gchar *arg_new_name);

  void (*running_changed) (
    BamfDBusItemView *object,
    gboolean arg_is_running);

  void (*urgent_changed) (
    BamfDBusItemView *object,
    gboolean arg_is_urgent);

  void (*user_visible_changed) (
    BamfDBusItemView *object,
    gboolean arg_user_visible);

};

GType bamf_dbus_item_view_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bamf_dbus_item_view_interface_info (void);
guint bamf_dbus_item_view_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bamf_dbus_item_view_complete_view_type (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    const gchar *view_type);

void bamf_dbus_item_view_complete_user_visible (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    gboolean visible);

void bamf_dbus_item_view_complete_icon (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void bamf_dbus_item_view_complete_name (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void bamf_dbus_item_view_complete_is_urgent (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    gboolean urgent);

void bamf_dbus_item_view_complete_is_running (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    gboolean running);

void bamf_dbus_item_view_complete_is_active (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    gboolean active);

void bamf_dbus_item_view_complete_parents (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *parents_paths);

void bamf_dbus_item_view_complete_children (
    BamfDBusItemView *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *children_paths);



/* D-Bus signal emissions functions: */
void bamf_dbus_item_view_emit_name_changed (
    BamfDBusItemView *object,
    const gchar *arg_old_name,
    const gchar *arg_new_name);

void bamf_dbus_item_view_emit_user_visible_changed (
    BamfDBusItemView *object,
    gboolean arg_user_visible);

void bamf_dbus_item_view_emit_urgent_changed (
    BamfDBusItemView *object,
    gboolean arg_is_urgent);

void bamf_dbus_item_view_emit_running_changed (
    BamfDBusItemView *object,
    gboolean arg_is_running);

void bamf_dbus_item_view_emit_child_removed (
    BamfDBusItemView *object,
    const gchar *arg_path);

void bamf_dbus_item_view_emit_child_added (
    BamfDBusItemView *object,
    const gchar *arg_path);

void bamf_dbus_item_view_emit_closed (
    BamfDBusItemView *object);

void bamf_dbus_item_view_emit_active_changed (
    BamfDBusItemView *object,
    gboolean arg_is_active);



/* D-Bus method calls: */
void bamf_dbus_item_view_call_view_type (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_view_type_finish (
    BamfDBusItemView *proxy,
    gchar **out_view_type,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_view_type_sync (
    BamfDBusItemView *proxy,
    gchar **out_view_type,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_user_visible (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_user_visible_finish (
    BamfDBusItemView *proxy,
    gboolean *out_visible,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_user_visible_sync (
    BamfDBusItemView *proxy,
    gboolean *out_visible,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_icon (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_icon_finish (
    BamfDBusItemView *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_icon_sync (
    BamfDBusItemView *proxy,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_name (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_name_finish (
    BamfDBusItemView *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_name_sync (
    BamfDBusItemView *proxy,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_is_urgent (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_is_urgent_finish (
    BamfDBusItemView *proxy,
    gboolean *out_urgent,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_is_urgent_sync (
    BamfDBusItemView *proxy,
    gboolean *out_urgent,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_is_running (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_is_running_finish (
    BamfDBusItemView *proxy,
    gboolean *out_running,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_is_running_sync (
    BamfDBusItemView *proxy,
    gboolean *out_running,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_is_active (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_is_active_finish (
    BamfDBusItemView *proxy,
    gboolean *out_active,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_is_active_sync (
    BamfDBusItemView *proxy,
    gboolean *out_active,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_parents (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_parents_finish (
    BamfDBusItemView *proxy,
    gchar ***out_parents_paths,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_parents_sync (
    BamfDBusItemView *proxy,
    gchar ***out_parents_paths,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_view_call_children (
    BamfDBusItemView *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_view_call_children_finish (
    BamfDBusItemView *proxy,
    gchar ***out_children_paths,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_view_call_children_sync (
    BamfDBusItemView *proxy,
    gchar ***out_children_paths,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean bamf_dbus_item_view_get_user_visible (BamfDBusItemView *object);
void bamf_dbus_item_view_set_user_visible (BamfDBusItemView *object, gboolean value);

gboolean bamf_dbus_item_view_get_running (BamfDBusItemView *object);
void bamf_dbus_item_view_set_running (BamfDBusItemView *object, gboolean value);

gboolean bamf_dbus_item_view_get_urgent (BamfDBusItemView *object);
void bamf_dbus_item_view_set_urgent (BamfDBusItemView *object, gboolean value);

gboolean bamf_dbus_item_view_get_active (BamfDBusItemView *object);
void bamf_dbus_item_view_set_active (BamfDBusItemView *object, gboolean value);


/* ---- */

#define BAMF_DBUS_ITEM_TYPE_VIEW_PROXY (bamf_dbus_item_view_proxy_get_type ())
#define BAMF_DBUS_ITEM_VIEW_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_VIEW_PROXY, BamfDBusItemViewProxy))
#define BAMF_DBUS_ITEM_VIEW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_VIEW_PROXY, BamfDBusItemViewProxyClass))
#define BAMF_DBUS_ITEM_VIEW_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_VIEW_PROXY, BamfDBusItemViewProxyClass))
#define BAMF_DBUS_ITEM_IS_VIEW_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_VIEW_PROXY))
#define BAMF_DBUS_ITEM_IS_VIEW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_VIEW_PROXY))

typedef struct _BamfDBusItemViewProxy BamfDBusItemViewProxy;
typedef struct _BamfDBusItemViewProxyClass BamfDBusItemViewProxyClass;
typedef struct _BamfDBusItemViewProxyPrivate BamfDBusItemViewProxyPrivate;

struct _BamfDBusItemViewProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BamfDBusItemViewProxyPrivate *priv;
};

struct _BamfDBusItemViewProxyClass
{
  GDBusProxyClass parent_class;
};

GType bamf_dbus_item_view_proxy_get_type (void) G_GNUC_CONST;

void bamf_dbus_item_view_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemView *bamf_dbus_item_view_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemView *bamf_dbus_item_view_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bamf_dbus_item_view_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemView *bamf_dbus_item_view_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemView *bamf_dbus_item_view_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BAMF_DBUS_ITEM_TYPE_VIEW_SKELETON (bamf_dbus_item_view_skeleton_get_type ())
#define BAMF_DBUS_ITEM_VIEW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_VIEW_SKELETON, BamfDBusItemViewSkeleton))
#define BAMF_DBUS_ITEM_VIEW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_VIEW_SKELETON, BamfDBusItemViewSkeletonClass))
#define BAMF_DBUS_ITEM_VIEW_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_VIEW_SKELETON, BamfDBusItemViewSkeletonClass))
#define BAMF_DBUS_ITEM_IS_VIEW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_VIEW_SKELETON))
#define BAMF_DBUS_ITEM_IS_VIEW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_VIEW_SKELETON))

typedef struct _BamfDBusItemViewSkeleton BamfDBusItemViewSkeleton;
typedef struct _BamfDBusItemViewSkeletonClass BamfDBusItemViewSkeletonClass;
typedef struct _BamfDBusItemViewSkeletonPrivate BamfDBusItemViewSkeletonPrivate;

struct _BamfDBusItemViewSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BamfDBusItemViewSkeletonPrivate *priv;
};

struct _BamfDBusItemViewSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bamf_dbus_item_view_skeleton_get_type (void) G_GNUC_CONST;

BamfDBusItemView *bamf_dbus_item_view_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.ayatana.bamf.application */

#define BAMF_DBUS_ITEM_TYPE_APPLICATION (bamf_dbus_item_application_get_type ())
#define BAMF_DBUS_ITEM_APPLICATION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION, BamfDBusItemApplication))
#define BAMF_DBUS_ITEM_IS_APPLICATION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION))
#define BAMF_DBUS_ITEM_APPLICATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION, BamfDBusItemApplicationIface))

struct _BamfDBusItemApplication;
typedef struct _BamfDBusItemApplication BamfDBusItemApplication;
typedef struct _BamfDBusItemApplicationIface BamfDBusItemApplicationIface;

struct _BamfDBusItemApplicationIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_application_type) (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_desktop_file) (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_show_stubs) (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_xids) (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation);

  void (*window_added) (
    BamfDBusItemApplication *object,
    const gchar *arg_path);

  void (*window_removed) (
    BamfDBusItemApplication *object,
    const gchar *arg_path);

};

GType bamf_dbus_item_application_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bamf_dbus_item_application_interface_info (void);
guint bamf_dbus_item_application_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bamf_dbus_item_application_complete_show_stubs (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation,
    gboolean show_stubs);

void bamf_dbus_item_application_complete_xids (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation,
    GVariant *xids);

void bamf_dbus_item_application_complete_desktop_file (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation,
    const gchar *desktop_file);

void bamf_dbus_item_application_complete_application_type (
    BamfDBusItemApplication *object,
    GDBusMethodInvocation *invocation,
    const gchar *type);



/* D-Bus signal emissions functions: */
void bamf_dbus_item_application_emit_window_removed (
    BamfDBusItemApplication *object,
    const gchar *arg_path);

void bamf_dbus_item_application_emit_window_added (
    BamfDBusItemApplication *object,
    const gchar *arg_path);



/* D-Bus method calls: */
void bamf_dbus_item_application_call_show_stubs (
    BamfDBusItemApplication *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_application_call_show_stubs_finish (
    BamfDBusItemApplication *proxy,
    gboolean *out_show_stubs,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_application_call_show_stubs_sync (
    BamfDBusItemApplication *proxy,
    gboolean *out_show_stubs,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_application_call_xids (
    BamfDBusItemApplication *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_application_call_xids_finish (
    BamfDBusItemApplication *proxy,
    GVariant **out_xids,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_application_call_xids_sync (
    BamfDBusItemApplication *proxy,
    GVariant **out_xids,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_application_call_desktop_file (
    BamfDBusItemApplication *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_application_call_desktop_file_finish (
    BamfDBusItemApplication *proxy,
    gchar **out_desktop_file,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_application_call_desktop_file_sync (
    BamfDBusItemApplication *proxy,
    gchar **out_desktop_file,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_application_call_application_type (
    BamfDBusItemApplication *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_application_call_application_type_finish (
    BamfDBusItemApplication *proxy,
    gchar **out_type,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_application_call_application_type_sync (
    BamfDBusItemApplication *proxy,
    gchar **out_type,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BAMF_DBUS_ITEM_TYPE_APPLICATION_PROXY (bamf_dbus_item_application_proxy_get_type ())
#define BAMF_DBUS_ITEM_APPLICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION_PROXY, BamfDBusItemApplicationProxy))
#define BAMF_DBUS_ITEM_APPLICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_APPLICATION_PROXY, BamfDBusItemApplicationProxyClass))
#define BAMF_DBUS_ITEM_APPLICATION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION_PROXY, BamfDBusItemApplicationProxyClass))
#define BAMF_DBUS_ITEM_IS_APPLICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION_PROXY))
#define BAMF_DBUS_ITEM_IS_APPLICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_APPLICATION_PROXY))

typedef struct _BamfDBusItemApplicationProxy BamfDBusItemApplicationProxy;
typedef struct _BamfDBusItemApplicationProxyClass BamfDBusItemApplicationProxyClass;
typedef struct _BamfDBusItemApplicationProxyPrivate BamfDBusItemApplicationProxyPrivate;

struct _BamfDBusItemApplicationProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BamfDBusItemApplicationProxyPrivate *priv;
};

struct _BamfDBusItemApplicationProxyClass
{
  GDBusProxyClass parent_class;
};

GType bamf_dbus_item_application_proxy_get_type (void) G_GNUC_CONST;

void bamf_dbus_item_application_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemApplication *bamf_dbus_item_application_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemApplication *bamf_dbus_item_application_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bamf_dbus_item_application_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemApplication *bamf_dbus_item_application_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemApplication *bamf_dbus_item_application_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BAMF_DBUS_ITEM_TYPE_APPLICATION_SKELETON (bamf_dbus_item_application_skeleton_get_type ())
#define BAMF_DBUS_ITEM_APPLICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION_SKELETON, BamfDBusItemApplicationSkeleton))
#define BAMF_DBUS_ITEM_APPLICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_APPLICATION_SKELETON, BamfDBusItemApplicationSkeletonClass))
#define BAMF_DBUS_ITEM_APPLICATION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION_SKELETON, BamfDBusItemApplicationSkeletonClass))
#define BAMF_DBUS_ITEM_IS_APPLICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_APPLICATION_SKELETON))
#define BAMF_DBUS_ITEM_IS_APPLICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_APPLICATION_SKELETON))

typedef struct _BamfDBusItemApplicationSkeleton BamfDBusItemApplicationSkeleton;
typedef struct _BamfDBusItemApplicationSkeletonClass BamfDBusItemApplicationSkeletonClass;
typedef struct _BamfDBusItemApplicationSkeletonPrivate BamfDBusItemApplicationSkeletonPrivate;

struct _BamfDBusItemApplicationSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BamfDBusItemApplicationSkeletonPrivate *priv;
};

struct _BamfDBusItemApplicationSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bamf_dbus_item_application_skeleton_get_type (void) G_GNUC_CONST;

BamfDBusItemApplication *bamf_dbus_item_application_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.ayatana.bamf.window */

#define BAMF_DBUS_ITEM_TYPE_WINDOW (bamf_dbus_item_window_get_type ())
#define BAMF_DBUS_ITEM_WINDOW(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_WINDOW, BamfDBusItemWindow))
#define BAMF_DBUS_ITEM_IS_WINDOW(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_WINDOW))
#define BAMF_DBUS_ITEM_WINDOW_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BAMF_DBUS_ITEM_TYPE_WINDOW, BamfDBusItemWindowIface))

struct _BamfDBusItemWindow;
typedef struct _BamfDBusItemWindow BamfDBusItemWindow;
typedef struct _BamfDBusItemWindowIface BamfDBusItemWindowIface;

struct _BamfDBusItemWindowIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_xid) (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_maximized) (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_monitor) (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_transient) (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_window_type) (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_xprop) (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_xprop);

  void (*maximized_changed) (
    BamfDBusItemWindow *object,
    gint arg_old,
    gint arg_new);

  void (*monitor_changed) (
    BamfDBusItemWindow *object,
    gint arg_old,
    gint arg_new);

};

GType bamf_dbus_item_window_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bamf_dbus_item_window_interface_info (void);
guint bamf_dbus_item_window_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bamf_dbus_item_window_complete_get_xid (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation,
    guint xid);

void bamf_dbus_item_window_complete_transient (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void bamf_dbus_item_window_complete_window_type (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation,
    guint type);

void bamf_dbus_item_window_complete_xprop (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation,
    const gchar *name);

void bamf_dbus_item_window_complete_monitor (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation,
    gint monitor_number);

void bamf_dbus_item_window_complete_maximized (
    BamfDBusItemWindow *object,
    GDBusMethodInvocation *invocation,
    gint maximized);



/* D-Bus signal emissions functions: */
void bamf_dbus_item_window_emit_monitor_changed (
    BamfDBusItemWindow *object,
    gint arg_old,
    gint arg_new);

void bamf_dbus_item_window_emit_maximized_changed (
    BamfDBusItemWindow *object,
    gint arg_old,
    gint arg_new);



/* D-Bus method calls: */
void bamf_dbus_item_window_call_get_xid (
    BamfDBusItemWindow *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_window_call_get_xid_finish (
    BamfDBusItemWindow *proxy,
    guint *out_xid,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_window_call_get_xid_sync (
    BamfDBusItemWindow *proxy,
    guint *out_xid,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_window_call_transient (
    BamfDBusItemWindow *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_window_call_transient_finish (
    BamfDBusItemWindow *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_window_call_transient_sync (
    BamfDBusItemWindow *proxy,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_window_call_window_type (
    BamfDBusItemWindow *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_window_call_window_type_finish (
    BamfDBusItemWindow *proxy,
    guint *out_type,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_window_call_window_type_sync (
    BamfDBusItemWindow *proxy,
    guint *out_type,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_window_call_xprop (
    BamfDBusItemWindow *proxy,
    const gchar *arg_xprop,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_window_call_xprop_finish (
    BamfDBusItemWindow *proxy,
    gchar **out_name,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_window_call_xprop_sync (
    BamfDBusItemWindow *proxy,
    const gchar *arg_xprop,
    gchar **out_name,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_window_call_monitor (
    BamfDBusItemWindow *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_window_call_monitor_finish (
    BamfDBusItemWindow *proxy,
    gint *out_monitor_number,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_window_call_monitor_sync (
    BamfDBusItemWindow *proxy,
    gint *out_monitor_number,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_window_call_maximized (
    BamfDBusItemWindow *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_window_call_maximized_finish (
    BamfDBusItemWindow *proxy,
    gint *out_maximized,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_window_call_maximized_sync (
    BamfDBusItemWindow *proxy,
    gint *out_maximized,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BAMF_DBUS_ITEM_TYPE_WINDOW_PROXY (bamf_dbus_item_window_proxy_get_type ())
#define BAMF_DBUS_ITEM_WINDOW_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_WINDOW_PROXY, BamfDBusItemWindowProxy))
#define BAMF_DBUS_ITEM_WINDOW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_WINDOW_PROXY, BamfDBusItemWindowProxyClass))
#define BAMF_DBUS_ITEM_WINDOW_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_WINDOW_PROXY, BamfDBusItemWindowProxyClass))
#define BAMF_DBUS_ITEM_IS_WINDOW_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_WINDOW_PROXY))
#define BAMF_DBUS_ITEM_IS_WINDOW_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_WINDOW_PROXY))

typedef struct _BamfDBusItemWindowProxy BamfDBusItemWindowProxy;
typedef struct _BamfDBusItemWindowProxyClass BamfDBusItemWindowProxyClass;
typedef struct _BamfDBusItemWindowProxyPrivate BamfDBusItemWindowProxyPrivate;

struct _BamfDBusItemWindowProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BamfDBusItemWindowProxyPrivate *priv;
};

struct _BamfDBusItemWindowProxyClass
{
  GDBusProxyClass parent_class;
};

GType bamf_dbus_item_window_proxy_get_type (void) G_GNUC_CONST;

void bamf_dbus_item_window_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemWindow *bamf_dbus_item_window_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemWindow *bamf_dbus_item_window_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bamf_dbus_item_window_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemWindow *bamf_dbus_item_window_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemWindow *bamf_dbus_item_window_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BAMF_DBUS_ITEM_TYPE_WINDOW_SKELETON (bamf_dbus_item_window_skeleton_get_type ())
#define BAMF_DBUS_ITEM_WINDOW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_WINDOW_SKELETON, BamfDBusItemWindowSkeleton))
#define BAMF_DBUS_ITEM_WINDOW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_WINDOW_SKELETON, BamfDBusItemWindowSkeletonClass))
#define BAMF_DBUS_ITEM_WINDOW_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_WINDOW_SKELETON, BamfDBusItemWindowSkeletonClass))
#define BAMF_DBUS_ITEM_IS_WINDOW_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_WINDOW_SKELETON))
#define BAMF_DBUS_ITEM_IS_WINDOW_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_WINDOW_SKELETON))

typedef struct _BamfDBusItemWindowSkeleton BamfDBusItemWindowSkeleton;
typedef struct _BamfDBusItemWindowSkeletonClass BamfDBusItemWindowSkeletonClass;
typedef struct _BamfDBusItemWindowSkeletonPrivate BamfDBusItemWindowSkeletonPrivate;

struct _BamfDBusItemWindowSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BamfDBusItemWindowSkeletonPrivate *priv;
};

struct _BamfDBusItemWindowSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bamf_dbus_item_window_skeleton_get_type (void) G_GNUC_CONST;

BamfDBusItemWindow *bamf_dbus_item_window_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.ayatana.bamf.indicator */

#define BAMF_DBUS_ITEM_TYPE_INDICATOR (bamf_dbus_item_indicator_get_type ())
#define BAMF_DBUS_ITEM_INDICATOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR, BamfDBusItemIndicator))
#define BAMF_DBUS_ITEM_IS_INDICATOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR))
#define BAMF_DBUS_ITEM_INDICATOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR, BamfDBusItemIndicatorIface))

struct _BamfDBusItemIndicator;
typedef struct _BamfDBusItemIndicator BamfDBusItemIndicator;
typedef struct _BamfDBusItemIndicatorIface BamfDBusItemIndicatorIface;

struct _BamfDBusItemIndicatorIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_address) (
    BamfDBusItemIndicator *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_path) (
    BamfDBusItemIndicator *object,
    GDBusMethodInvocation *invocation);

};

GType bamf_dbus_item_indicator_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bamf_dbus_item_indicator_interface_info (void);
guint bamf_dbus_item_indicator_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bamf_dbus_item_indicator_complete_path (
    BamfDBusItemIndicator *object,
    GDBusMethodInvocation *invocation,
    const gchar *path);

void bamf_dbus_item_indicator_complete_address (
    BamfDBusItemIndicator *object,
    GDBusMethodInvocation *invocation,
    const gchar *address);



/* D-Bus method calls: */
void bamf_dbus_item_indicator_call_path (
    BamfDBusItemIndicator *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_indicator_call_path_finish (
    BamfDBusItemIndicator *proxy,
    gchar **out_path,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_indicator_call_path_sync (
    BamfDBusItemIndicator *proxy,
    gchar **out_path,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_indicator_call_address (
    BamfDBusItemIndicator *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_indicator_call_address_finish (
    BamfDBusItemIndicator *proxy,
    gchar **out_address,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_indicator_call_address_sync (
    BamfDBusItemIndicator *proxy,
    gchar **out_address,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BAMF_DBUS_ITEM_TYPE_INDICATOR_PROXY (bamf_dbus_item_indicator_proxy_get_type ())
#define BAMF_DBUS_ITEM_INDICATOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR_PROXY, BamfDBusItemIndicatorProxy))
#define BAMF_DBUS_ITEM_INDICATOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_INDICATOR_PROXY, BamfDBusItemIndicatorProxyClass))
#define BAMF_DBUS_ITEM_INDICATOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR_PROXY, BamfDBusItemIndicatorProxyClass))
#define BAMF_DBUS_ITEM_IS_INDICATOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR_PROXY))
#define BAMF_DBUS_ITEM_IS_INDICATOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_INDICATOR_PROXY))

typedef struct _BamfDBusItemIndicatorProxy BamfDBusItemIndicatorProxy;
typedef struct _BamfDBusItemIndicatorProxyClass BamfDBusItemIndicatorProxyClass;
typedef struct _BamfDBusItemIndicatorProxyPrivate BamfDBusItemIndicatorProxyPrivate;

struct _BamfDBusItemIndicatorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BamfDBusItemIndicatorProxyPrivate *priv;
};

struct _BamfDBusItemIndicatorProxyClass
{
  GDBusProxyClass parent_class;
};

GType bamf_dbus_item_indicator_proxy_get_type (void) G_GNUC_CONST;

void bamf_dbus_item_indicator_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemIndicator *bamf_dbus_item_indicator_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemIndicator *bamf_dbus_item_indicator_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bamf_dbus_item_indicator_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemIndicator *bamf_dbus_item_indicator_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemIndicator *bamf_dbus_item_indicator_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BAMF_DBUS_ITEM_TYPE_INDICATOR_SKELETON (bamf_dbus_item_indicator_skeleton_get_type ())
#define BAMF_DBUS_ITEM_INDICATOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR_SKELETON, BamfDBusItemIndicatorSkeleton))
#define BAMF_DBUS_ITEM_INDICATOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_INDICATOR_SKELETON, BamfDBusItemIndicatorSkeletonClass))
#define BAMF_DBUS_ITEM_INDICATOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR_SKELETON, BamfDBusItemIndicatorSkeletonClass))
#define BAMF_DBUS_ITEM_IS_INDICATOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_INDICATOR_SKELETON))
#define BAMF_DBUS_ITEM_IS_INDICATOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_INDICATOR_SKELETON))

typedef struct _BamfDBusItemIndicatorSkeleton BamfDBusItemIndicatorSkeleton;
typedef struct _BamfDBusItemIndicatorSkeletonClass BamfDBusItemIndicatorSkeletonClass;
typedef struct _BamfDBusItemIndicatorSkeletonPrivate BamfDBusItemIndicatorSkeletonPrivate;

struct _BamfDBusItemIndicatorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BamfDBusItemIndicatorSkeletonPrivate *priv;
};

struct _BamfDBusItemIndicatorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bamf_dbus_item_indicator_skeleton_get_type (void) G_GNUC_CONST;

BamfDBusItemIndicator *bamf_dbus_item_indicator_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.ayatana.bamf.tab */

#define BAMF_DBUS_ITEM_TYPE_TAB (bamf_dbus_item_tab_get_type ())
#define BAMF_DBUS_ITEM_TAB(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_TAB, BamfDBusItemTab))
#define BAMF_DBUS_ITEM_IS_TAB(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_TAB))
#define BAMF_DBUS_ITEM_TAB_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BAMF_DBUS_ITEM_TYPE_TAB, BamfDBusItemTabIface))

struct _BamfDBusItemTab;
typedef struct _BamfDBusItemTab BamfDBusItemTab;
typedef struct _BamfDBusItemTabIface BamfDBusItemTabIface;

struct _BamfDBusItemTabIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_current_uri) (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_parent_xid) (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_preview) (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_show_tab) (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation);

  void (*uri_changed) (
    BamfDBusItemTab *object,
    const gchar *arg_old,
    const gchar *arg_new);

};

GType bamf_dbus_item_tab_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *bamf_dbus_item_tab_interface_info (void);
guint bamf_dbus_item_tab_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void bamf_dbus_item_tab_complete_show_tab (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation);

void bamf_dbus_item_tab_complete_parent_xid (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation,
    guint xid);

void bamf_dbus_item_tab_complete_current_uri (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation,
    const gchar *uri);

void bamf_dbus_item_tab_complete_preview (
    BamfDBusItemTab *object,
    GDBusMethodInvocation *invocation,
    const gchar *data);



/* D-Bus signal emissions functions: */
void bamf_dbus_item_tab_emit_uri_changed (
    BamfDBusItemTab *object,
    const gchar *arg_old,
    const gchar *arg_new);



/* D-Bus method calls: */
void bamf_dbus_item_tab_call_show_tab (
    BamfDBusItemTab *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_tab_call_show_tab_finish (
    BamfDBusItemTab *proxy,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_tab_call_show_tab_sync (
    BamfDBusItemTab *proxy,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_tab_call_parent_xid (
    BamfDBusItemTab *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_tab_call_parent_xid_finish (
    BamfDBusItemTab *proxy,
    guint *out_xid,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_tab_call_parent_xid_sync (
    BamfDBusItemTab *proxy,
    guint *out_xid,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_tab_call_current_uri (
    BamfDBusItemTab *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_tab_call_current_uri_finish (
    BamfDBusItemTab *proxy,
    gchar **out_uri,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_tab_call_current_uri_sync (
    BamfDBusItemTab *proxy,
    gchar **out_uri,
    GCancellable *cancellable,
    GError **error);

void bamf_dbus_item_tab_call_preview (
    BamfDBusItemTab *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean bamf_dbus_item_tab_call_preview_finish (
    BamfDBusItemTab *proxy,
    gchar **out_data,
    GAsyncResult *res,
    GError **error);

gboolean bamf_dbus_item_tab_call_preview_sync (
    BamfDBusItemTab *proxy,
    gchar **out_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define BAMF_DBUS_ITEM_TYPE_TAB_PROXY (bamf_dbus_item_tab_proxy_get_type ())
#define BAMF_DBUS_ITEM_TAB_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_TAB_PROXY, BamfDBusItemTabProxy))
#define BAMF_DBUS_ITEM_TAB_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_TAB_PROXY, BamfDBusItemTabProxyClass))
#define BAMF_DBUS_ITEM_TAB_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_TAB_PROXY, BamfDBusItemTabProxyClass))
#define BAMF_DBUS_ITEM_IS_TAB_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_TAB_PROXY))
#define BAMF_DBUS_ITEM_IS_TAB_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_TAB_PROXY))

typedef struct _BamfDBusItemTabProxy BamfDBusItemTabProxy;
typedef struct _BamfDBusItemTabProxyClass BamfDBusItemTabProxyClass;
typedef struct _BamfDBusItemTabProxyPrivate BamfDBusItemTabProxyPrivate;

struct _BamfDBusItemTabProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  BamfDBusItemTabProxyPrivate *priv;
};

struct _BamfDBusItemTabProxyClass
{
  GDBusProxyClass parent_class;
};

GType bamf_dbus_item_tab_proxy_get_type (void) G_GNUC_CONST;

void bamf_dbus_item_tab_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemTab *bamf_dbus_item_tab_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemTab *bamf_dbus_item_tab_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void bamf_dbus_item_tab_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
BamfDBusItemTab *bamf_dbus_item_tab_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
BamfDBusItemTab *bamf_dbus_item_tab_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define BAMF_DBUS_ITEM_TYPE_TAB_SKELETON (bamf_dbus_item_tab_skeleton_get_type ())
#define BAMF_DBUS_ITEM_TAB_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_TAB_SKELETON, BamfDBusItemTabSkeleton))
#define BAMF_DBUS_ITEM_TAB_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_TAB_SKELETON, BamfDBusItemTabSkeletonClass))
#define BAMF_DBUS_ITEM_TAB_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_TAB_SKELETON, BamfDBusItemTabSkeletonClass))
#define BAMF_DBUS_ITEM_IS_TAB_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_TAB_SKELETON))
#define BAMF_DBUS_ITEM_IS_TAB_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_TAB_SKELETON))

typedef struct _BamfDBusItemTabSkeleton BamfDBusItemTabSkeleton;
typedef struct _BamfDBusItemTabSkeletonClass BamfDBusItemTabSkeletonClass;
typedef struct _BamfDBusItemTabSkeletonPrivate BamfDBusItemTabSkeletonPrivate;

struct _BamfDBusItemTabSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  BamfDBusItemTabSkeletonPrivate *priv;
};

struct _BamfDBusItemTabSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType bamf_dbus_item_tab_skeleton_get_type (void) G_GNUC_CONST;

BamfDBusItemTab *bamf_dbus_item_tab_skeleton_new (void);


/* ---- */

#define BAMF_DBUS_ITEM_TYPE_OBJECT (bamf_dbus_item_object_get_type ())
#define BAMF_DBUS_ITEM_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_OBJECT, BamfDBusItemObject))
#define BAMF_DBUS_ITEM_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_OBJECT))
#define BAMF_DBUS_ITEM_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), BAMF_DBUS_ITEM_TYPE_OBJECT, BamfDBusItemObject))

struct _BamfDBusItemObject;
typedef struct _BamfDBusItemObject BamfDBusItemObject;
typedef struct _BamfDBusItemObjectIface BamfDBusItemObjectIface;

struct _BamfDBusItemObjectIface
{
  GTypeInterface parent_iface;
};

GType bamf_dbus_item_object_get_type (void) G_GNUC_CONST;

BamfDBusItemView *bamf_dbus_item_object_get_view (BamfDBusItemObject *object);
BamfDBusItemApplication *bamf_dbus_item_object_get_application (BamfDBusItemObject *object);
BamfDBusItemWindow *bamf_dbus_item_object_get_window (BamfDBusItemObject *object);
BamfDBusItemIndicator *bamf_dbus_item_object_get_indicator (BamfDBusItemObject *object);
BamfDBusItemTab *bamf_dbus_item_object_get_tab (BamfDBusItemObject *object);
BamfDBusItemView *bamf_dbus_item_object_peek_view (BamfDBusItemObject *object);
BamfDBusItemApplication *bamf_dbus_item_object_peek_application (BamfDBusItemObject *object);
BamfDBusItemWindow *bamf_dbus_item_object_peek_window (BamfDBusItemObject *object);
BamfDBusItemIndicator *bamf_dbus_item_object_peek_indicator (BamfDBusItemObject *object);
BamfDBusItemTab *bamf_dbus_item_object_peek_tab (BamfDBusItemObject *object);

#define BAMF_DBUS_ITEM_TYPE_OBJECT_PROXY (bamf_dbus_item_object_proxy_get_type ())
#define BAMF_DBUS_ITEM_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_PROXY, BamfDBusItemObjectProxy))
#define BAMF_DBUS_ITEM_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_OBJECT_PROXY, BamfDBusItemObjectProxyClass))
#define BAMF_DBUS_ITEM_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_PROXY, BamfDBusItemObjectProxyClass))
#define BAMF_DBUS_ITEM_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_PROXY))
#define BAMF_DBUS_ITEM_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_OBJECT_PROXY))

typedef struct _BamfDBusItemObjectProxy BamfDBusItemObjectProxy;
typedef struct _BamfDBusItemObjectProxyClass BamfDBusItemObjectProxyClass;
typedef struct _BamfDBusItemObjectProxyPrivate BamfDBusItemObjectProxyPrivate;

struct _BamfDBusItemObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  BamfDBusItemObjectProxyPrivate *priv;
};

struct _BamfDBusItemObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType bamf_dbus_item_object_proxy_get_type (void) G_GNUC_CONST;
BamfDBusItemObjectProxy *bamf_dbus_item_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON (bamf_dbus_item_object_skeleton_get_type ())
#define BAMF_DBUS_ITEM_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON, BamfDBusItemObjectSkeleton))
#define BAMF_DBUS_ITEM_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON, BamfDBusItemObjectSkeletonClass))
#define BAMF_DBUS_ITEM_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON, BamfDBusItemObjectSkeletonClass))
#define BAMF_DBUS_ITEM_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON))
#define BAMF_DBUS_ITEM_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_OBJECT_SKELETON))

typedef struct _BamfDBusItemObjectSkeleton BamfDBusItemObjectSkeleton;
typedef struct _BamfDBusItemObjectSkeletonClass BamfDBusItemObjectSkeletonClass;
typedef struct _BamfDBusItemObjectSkeletonPrivate BamfDBusItemObjectSkeletonPrivate;

struct _BamfDBusItemObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  BamfDBusItemObjectSkeletonPrivate *priv;
};

struct _BamfDBusItemObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType bamf_dbus_item_object_skeleton_get_type (void) G_GNUC_CONST;
BamfDBusItemObjectSkeleton *bamf_dbus_item_object_skeleton_new (const gchar *object_path);
void bamf_dbus_item_object_skeleton_set_view (BamfDBusItemObjectSkeleton *object, BamfDBusItemView *interface_);
void bamf_dbus_item_object_skeleton_set_application (BamfDBusItemObjectSkeleton *object, BamfDBusItemApplication *interface_);
void bamf_dbus_item_object_skeleton_set_window (BamfDBusItemObjectSkeleton *object, BamfDBusItemWindow *interface_);
void bamf_dbus_item_object_skeleton_set_indicator (BamfDBusItemObjectSkeleton *object, BamfDBusItemIndicator *interface_);
void bamf_dbus_item_object_skeleton_set_tab (BamfDBusItemObjectSkeleton *object, BamfDBusItemTab *interface_);

/* ---- */

#define BAMF_DBUS_ITEM_TYPE_OBJECT_MANAGER_CLIENT (bamf_dbus_item_object_manager_client_get_type ())
#define BAMF_DBUS_ITEM_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_MANAGER_CLIENT, BamfDBusItemObjectManagerClient))
#define BAMF_DBUS_ITEM_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), BAMF_DBUS_ITEM_TYPE_OBJECT_MANAGER_CLIENT, BamfDBusItemObjectManagerClientClass))
#define BAMF_DBUS_ITEM_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_MANAGER_CLIENT, BamfDBusItemObjectManagerClientClass))
#define BAMF_DBUS_ITEM_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), BAMF_DBUS_ITEM_TYPE_OBJECT_MANAGER_CLIENT))
#define BAMF_DBUS_ITEM_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), BAMF_DBUS_ITEM_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _BamfDBusItemObjectManagerClient BamfDBusItemObjectManagerClient;
typedef struct _BamfDBusItemObjectManagerClientClass BamfDBusItemObjectManagerClientClass;
typedef struct _BamfDBusItemObjectManagerClientPrivate BamfDBusItemObjectManagerClientPrivate;

struct _BamfDBusItemObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  BamfDBusItemObjectManagerClientPrivate *priv;
};

struct _BamfDBusItemObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType bamf_dbus_item_object_manager_client_get_type (void) G_GNUC_CONST;

GType bamf_dbus_item_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void bamf_dbus_item_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *bamf_dbus_item_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *bamf_dbus_item_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void bamf_dbus_item_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *bamf_dbus_item_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *bamf_dbus_item_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __BAMF_GDBUS_VIEW_GENERATED_H__ */
